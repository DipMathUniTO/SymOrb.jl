function ϕ(g::GroupElement)::Matrix
    M = zeros(  size(g.M, 1), size(g.σ, 1), size(g.M, 1), size(g.σ, 1))

    for (ix, v) in enumerate(g.σ)
        M[:, ix, :, v] .= g.M
    end
    return reshape(M, size(M, 1) * size(M, 2), size(M, 1) * size(M, 2))
end


"""
    ϕg_n(v::Config, n::Int)::Config

Action of the n-th power of g ∈ G on v ∈ ℝᵈᴺ 
"""
ϕg_n(g::Vector{GroupElement})::Vector{Matrix} = 
    if (length(g) > 1)
        ϕ.(g)
    else
        [I(size(g[1].M, 1) * size(g[1].σ, 1))]
    end


"""
    π_H(H::Vector{GroupElement}, v::Config)::Config

Projection onto the subspace spanned by the action of H on v
"""
π_H(H::Vector{GroupElement})::Matrix = sum(ϕ.(H)) / length(H)

"""
    π_H(H::GroupElement, v::Config) 

Projection onto the subspace generated by a single H
"""
π_H(H::GroupElement)::Matrix = (I(size(H.M,1) * size(H.σ, 1)) + ϕ(H))/2


"""
    π_a(v::Config, w::Config)::Tuple{Config,Config}

Project the extremities `v, w` of a path
"""
function π_bc(G::SymmetryGroup, dims)::Matrix{Float64} 
    F, N, dim = dims
    M = zeros(N*dim,  F+2, N*dim, F+2)

    if (G.action_type == Cyclic)
        M[:,  1 , :,  1 ] = I(N*dim)/2
        M[:,  1 , :, F+2] = ϕg_n(G.g)[end - 1] / 2
        M[:, F+2, :,  1 ] = ϕg_n(G.g)[1] / 2
        M[:, F+2, :, F+2] = I(N*dim)/2
    else
        M[:,  1 , :,  1 ] = π_H(G.H0)
        M[:, F+2, :, F+2] = π_H(G.H1)
    end

    for i ∈ 2:F+1
        M[:, i, :, i] = I(N*dim)
    end

    reshape(M, (F+2)*N*dim, (F+2)*N*dim)
end


function π_kerT(G::SymmetryGroup, dims)::Matrix{Float64}
    F, N, dim = dims
    M = zeros(N*dim, F+2, N*dim, F+2)

    for i ∈ 1:F+2
        M[:, i, :, i] = π_H(G.kerT)
    end

    reshape(M, (F+2)*N*dim, (F+2)*N*dim)
end



function nth_body(m::Vector{Float64}, dims)
    F, N, dim = dims
    M = zeros(dim, N, F+2, dim, N-1, F+2)
    for k ∈ axes(M, 3), i ∈ axes(M, 5)
        M[:,  i , k, :, i, k] = I(dim)
        M[:, end, k, :, i, k] = - m[i] / m[end] * I(dim)
    end
    return reshape(M, (F+2)*N*dim, (F+2)*(N-1)*dim)
end


function remove_nth_body(dims)
    F, N, dim = dims
    M = zeros(dim, N-1, F+2, dim, N, F+2)
    for i in axes(M, 2), k in axes(M, 3)
        M[:, i, k, :, i, k] = I(dim)
    end
    return reshape(M, (F+2)*(N-1)*dim, (F+2)*N*dim)
end
""" 
    project(A::Coefficients)::Coefficients
\
Project the whole path
"""
project(G::SymmetryGroup, m::Vector{Float64}, dims) = π_kerT(G, dims) * π_bc(G, dims)